# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graphql/**/*.graphqls

# Where should the generated server code go?
exec:
  layout: follow-schema
  dir: graphql/generated
  package: generated

# Enable Apollo federation support - You may not need this. Read more about GraphQL federation
federation:
  filename: graphql/generated/federation.go
  package: generated
  version: 2

# Where should any generated models go?
model:
  filename: graphql/models/models_gen.go
  package: models

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graphql/resolvers
  package: resolvers
  filename_template: "{name}.resolvers.go"

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# Optional: set to skip running `go mod tidy` when generating server code
# skip_mod_tidy: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
# autobind: 
# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - com.thebeachmaster/golang-graphql-template/internal/models/uuidgql.UUID
  Int64:
    model:
      - com.thebeachmaster/golang-graphql-template/internal/models/int64gql.Int64
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int32
      - github.com/99designs/gqlgen/graphql.Int64
  # Node: ## Consider what to put here
  #   model:
  #     - 
  
    